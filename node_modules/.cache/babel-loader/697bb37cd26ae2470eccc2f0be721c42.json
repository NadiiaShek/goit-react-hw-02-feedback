{"ast":null,"code":"var _jsxFileName = \"/Users/nadiia/Documents/GitHub/goit-react-hw-02-feedback/src/components/FeedbackOptions/FeedbackOptions.jsx\";\nimport React from 'react';\nimport { Box, Button } from './FeedbackOptions.styled';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FeedbackOptions = _ref => {\n  let {\n    options,\n    onLeaveFeedback\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [options.map(option => {\n      return /*#__PURE__*/_jsxDEV(Button, {\n        type: \"button\",\n        onClick: chooseMethod(option, onLeaveFeedback),\n        children: option\n      }, option, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 11\n      }, this);\n    }), ' ']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n_c = FeedbackOptions;\n\nfunction chooseMethod(option, onLeaveFeedback) {\n  if (option === 'good') {\n    return onLeaveFeedback[0];\n  }\n\n  if (option === 'neutral') {\n    return onLeaveFeedback[1];\n  }\n\n  if (option === 'bad') {\n    return onLeaveFeedback[2];\n  }\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"FeedbackOptions\");","map":{"version":3,"sources":["/Users/nadiia/Documents/GitHub/goit-react-hw-02-feedback/src/components/FeedbackOptions/FeedbackOptions.jsx"],"names":["React","Box","Button","PropTypes","FeedbackOptions","options","onLeaveFeedback","map","option","chooseMethod","propTypes","array","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,MAAd,QAA4B,0BAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,OAAO,MAAMC,eAAe,GAAG,QAAkC;AAAA,MAAjC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAiC;AAC/D,sBACE,QAAC,GAAD;AAAA,eACGD,OAAO,CAACE,GAAR,CAAYC,MAAM,IAAI;AACrB,0BACE,QAAC,MAAD;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,OAAO,EAAEC,YAAY,CAACD,MAAD,EAASF,eAAT,CAFvB;AAAA,kBAKGE;AALH,SAGOA,MAHP;AAAA;AAAA;AAAA;AAAA,cADF;AASD,KAVA,CADH,EAWM,GAXN;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAhBM;KAAMJ,e;;AAiBb,SAASK,YAAT,CAAsBD,MAAtB,EAA8BF,eAA9B,EAA+C;AAC7C,MAAIE,MAAM,KAAK,MAAf,EAAuB;AACrB,WAAOF,eAAe,CAAC,CAAD,CAAtB;AACD;;AACD,MAAIE,MAAM,KAAK,SAAf,EAA0B;AACxB,WAAOF,eAAe,CAAC,CAAD,CAAtB;AACD;;AACD,MAAIE,MAAM,KAAK,KAAf,EAAsB;AACpB,WAAOF,eAAe,CAAC,CAAD,CAAtB;AACD;AACF;;AACDF,eAAe,CAACM,SAAhB,GAA4B;AAC1BL,EAAAA,OAAO,EAAEF,SAAS,CAACQ,KAAV,CAAgBC;AADC,CAA5B","sourcesContent":["import React from 'react';\nimport { Box, Button } from './FeedbackOptions.styled';\nimport PropTypes from 'prop-types';\n\nexport const FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <Box>\n      {options.map(option => {\n        return (\n          <Button\n            type=\"button\"\n            onClick={chooseMethod(option, onLeaveFeedback)}\n            key={option}\n          >\n            {option}\n          </Button>\n        );\n      })}{' '}\n    </Box>\n  );\n};\nfunction chooseMethod(option, onLeaveFeedback) {\n  if (option === 'good') {\n    return onLeaveFeedback[0];\n  }\n  if (option === 'neutral') {\n    return onLeaveFeedback[1];\n  }\n  if (option === 'bad') {\n    return onLeaveFeedback[2];\n  }\n}\nFeedbackOptions.propTypes = {\n  options: PropTypes.array.isRequired,\n};"]},"metadata":{},"sourceType":"module"}