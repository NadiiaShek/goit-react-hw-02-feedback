{"ast":null,"code":"var _jsxFileName = \"/Users/nadiia/Documents/GitHub/goit-react-hw-02-feedback/src/components/App.jsx\";\nimport React, { Component } from 'react';\nimport { Statistics } from './Statistics/Statistics';\nimport { FeedbackOptions } from './FeedbackOptions/FeedbackOptions';\nimport { Section } from './Section/Section';\nimport { Notification } from './Notification/Notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      good: this.props.initialGood,\n      neutral: this.props.initialNeutral,\n      bad: this.props.initialBad\n    };\n\n    this.StatisticGoodCounter = () => {\n      this.setState(prevState => ({\n        good: prevState.good += 1\n      }));\n    };\n\n    this.StatisticNeutralCounter = () => {\n      this.setState(prevState => ({\n        neutral: prevState.neutral += 1\n      }));\n    };\n\n    this.StatisticBadCounter = () => {\n      this.setState(prevState => ({\n        bad: prevState.bad += 1\n      }));\n    };\n\n    this.countTotalFeedback = () => {\n      return this.state.good + this.state.neutral + this.state.bad;\n    };\n\n    this.countPositiveFeedbackPercentage = () => {\n      const total = this.state.good + this.state.neutral + this.state.bad;\n      const positive = this.state.good * 100;\n\n      if (total === 0) {\n        return 0;\n      }\n\n      return Math.round(positive / total);\n    };\n  }\n\n  render() {\n    const total = this.state.good + this.state.neutral + this.state.bad;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '1000px',\n        margin: '0 auto',\n        padding: '0 50px',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Section, {\n        title: \"Please leave feedback\",\n        children: /*#__PURE__*/_jsxDEV(FeedbackOptions, {\n          options: ['good', 'neutral', 'bad'],\n          onLeaveFeedback: [this.StatisticGoodCounter, this.StatisticNeutralCounter, this.StatisticBadCounter]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), total !== 0 ? /*#__PURE__*/_jsxDEV(Section, {\n        title: \"Statistics\",\n        children: /*#__PURE__*/_jsxDEV(Statistics, {\n          state: this.state,\n          total: this.countTotalFeedback,\n          feedback: this.countPositiveFeedbackPercentage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Notification, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nApp.defaultProps = {\n  initialGood: 0,\n  initialNeutral: 0,\n  initialBad: 0\n};\nexport default App;","map":{"version":3,"sources":["/Users/nadiia/Documents/GitHub/goit-react-hw-02-feedback/src/components/App.jsx"],"names":["React","Component","Statistics","FeedbackOptions","Section","Notification","App","state","good","props","initialGood","neutral","initialNeutral","bad","initialBad","StatisticGoodCounter","setState","prevState","StatisticNeutralCounter","StatisticBadCounter","countTotalFeedback","countPositiveFeedbackPercentage","total","positive","Math","round","render","width","margin","padding","display","flexDirection","alignItems","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Statistics } from './Statistics/Statistics';\nimport { FeedbackOptions } from './FeedbackOptions/FeedbackOptions';\nimport { Section } from './Section/Section';\nimport { Notification } from './Notification/Notification';\n\nclass App extends Component {\n  static defaultProps = {\n    initialGood: 0,\n    initialNeutral: 0,\n    initialBad: 0,\n  };\n  state = {\n    good: this.props.initialGood,\n    neutral: this.props.initialNeutral,\n    bad: this.props.initialBad,\n  };\n  StatisticGoodCounter = () => {\n    this.setState(prevState => ({\n      good: (prevState.good += 1),\n    }));\n  };\n  StatisticNeutralCounter = () => {\n    this.setState(prevState => ({\n      neutral: (prevState.neutral += 1),\n    }));\n  };\n  StatisticBadCounter = () => {\n    this.setState(prevState => ({\n      bad: (prevState.bad += 1),\n    }));\n  };\n  countTotalFeedback = () => {\n    return this.state.good + this.state.neutral + this.state.bad;\n  };\n  countPositiveFeedbackPercentage = () => {\n    const total = this.state.good + this.state.neutral + this.state.bad;\n    const positive = this.state.good * 100;\n    if (total === 0) {\n      return 0;\n    }\n    return Math.round(positive / total);\n  };\n  render() {\n    const total = this.state.good + this.state.neutral + this.state.bad;\n\n    return (\n      <div\n        style={{\n          width: '1000px',\n          margin: '0 auto',\n          padding: '0 50px',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={['good', 'neutral', 'bad']}\n            onLeaveFeedback={[\n              this.StatisticGoodCounter,\n              this.StatisticNeutralCounter,\n              this.StatisticBadCounter,\n            ]}\n          ></FeedbackOptions>\n        </Section>\n\n        {total !== 0 ? (\n          <Section title=\"Statistics\">\n            <Statistics\n              state={this.state}\n              total={this.countTotalFeedback}\n              feedback={this.countPositiveFeedbackPercentage}\n            ></Statistics>\n          </Section>\n        ) : (\n          <Notification></Notification>\n        )}\n      </div>\n    );\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}